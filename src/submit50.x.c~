#if 0
	shc Version 3.8.6, Generic Script Compiler
	Copyright (c) 1994-2006 Francisco Rosales <frosal@fi.upm.es>

	shc -r -f ./submit50 
#endif

static  char data [] = 
#define      opts_z	1
#define      opts	((&data[0]))
	"\166"
#define      date_z	8
#define      date	((time_t*)(&data[8]))
	"\210\015\052\062\234\072\006\017\226\310\040\066\013\134\276\315"
	"\307"
#define      shll_z	10
#define      shll	((&data[18]))
	"\027\110\074\252\104\066\373\222\240\375"
#define      tst2_z	19
#define      tst2	((&data[32]))
	"\231\333\127\325\061\034\144\300\313\130\130\347\257\262\157\260"
	"\325\214\324\013\253\110\116"
#define      pswd_z	256
#define      pswd	((&data[52]))
	"\263\041\017\037\065\133\253\107\260\213\047\331\067\142\164\354"
	"\030\310\011\376\215\313\200\340\311\163\227\303\270\275\317\333"
	"\336\336\373\023\072\247\133\353\062\202\305\152\345\071\126\375"
	"\002\137\374\217\053\174\157\364\360\006\267\250\303\206\204\242"
	"\145\200\265\240\047\020\213\132\223\121\304\170\212\032\166\214"
	"\172\162\033\245\356\213\232\337\221\122\207\125\331\014\367\076"
	"\214\255\337\263\276\153\016\121\274\322\311\106\354\077\322\147"
	"\262\356\015\241\171\247\200\013\372\010\141\323\024\131\022\241"
	"\006\361\124\304\134\143\025\030\065\337\137\042\037\061\211\321"
	"\040\226\162\231\076\363\244\070\373\006\013\017\137\035\260\146"
	"\017\005\052\153\150\100\204\236\040\343\300\100\025\111\021\065"
	"\340\204\316\036\167\163\126\163\172\141\202\331\177\063\077\216"
	"\071\152\372\241\253\177\100\313\142\000\013\167\112\035\255\052"
	"\242\174\110\032\360\236\215\152\000\020\104\177\104\203\016\175"
	"\356\011\037\231\210\137\145\353\137\160\143\251\216\020\324\061"
	"\214\034\113\175\273\331\347\273\351\053\073\055\257\111\252\235"
	"\123\244\162\175\333\116\246\170"
#define      msg1_z	42
#define      msg1	((&data[317]))
	"\077\142\163\334\207\214\136\132\144\246\353\123\205\055\300\062"
	"\112\127\220\156\251\340\217\043\061\372\366\312\075\355\304\376"
	"\337\364\205\302\251\014\367\206\071\036\267\113\041\171\151\356"
	"\101"
#define      chk1_z	22
#define      chk1	((&data[364]))
	"\363\150\017\046\203\146\321\121\053\300\215\254\025\000\235\373"
	"\370\245\002\233\151\105\152\371\261"
#define      inlo_z	3
#define      inlo	((&data[389]))
	"\162\206\003"
#define      text_z	3045
#define      text	((&data[1049]))
	"\370\220\264\153\015\220\271\263\010\316\343\216\015\105\260\207"
	"\256\237\310\073\247\116\246\240\000\253\164\011\204\121\031\175"
	"\341\316\350\356\136\242\242\147\160\206\366\176\313\246\005\172"
	"\106\316\266\355\035\134\215\035\007\002\047\214\123\100\012\065"
	"\016\363\043\155\225\306\325\005\114\313\204\030\162\211\223\270"
	"\130\111\246\165\245\063\223\255\066\272\072\211\373\105\276\012"
	"\070\342\167\316\251\115\323\366\030\130\016\212\342\241\103\072"
	"\353\351\260\221\035\104\076\123\377\171\334\372\276\233\005\367"
	"\176\175\305\050\312\231\036\342\361\055\155\323\316\260\016\271"
	"\231\277\112\267\003\211\012\002\003\347\375\302\203\002\272\001"
	"\177\177\052\111\031\110\054\013\165\231\337\104\112\355\376\344"
	"\254\111\233\257\323\245\262\326\215\257\231\020\262\123\022\061"
	"\323\074\173\354\204\250\367\372\102\326\077\214\304\075\161\160"
	"\207\014\040\132\262\323\061\077\203\312\117\065\036\141\147\361"
	"\236\342\335\042\213\325\035\315\254\134\132\160\232\313\341\041"
	"\330\002\174\213\326\256\312\131\170\032\216\226\174\365\210\032"
	"\330\146\075\144\073\133\061\350\267\213\131\122\127\073\164\057"
	"\076\361\273\024\237\205\155\027\240\373\256\035\361\067\067\312"
	"\235\165\056\331\320\140\301\210\354\033\333\103\126\117\163\224"
	"\100\056\250\340\264\026\367\125\022\246\162\003\335\252\316\173"
	"\037\375\124\360\136\026\170\112\062\123\216\210\243\002\035\344"
	"\061\306\304\345\334\274\073\356\143\255\362\101\127\301\274\167"
	"\276\021\147\035\047\340\147\131\064\366\342\327\370\000\274\051"
	"\306\200\017\243\075\112\222\240\370\205\341\120\106\236\307\005"
	"\257\056\042\326\016\212\060\103\200\022\032\171\022\327\242\331"
	"\130\262\175\225\375\017\066\365\224\030\105\333\266\015\340\145"
	"\074\003\074\113\215\154\216\016\177\250\207\222\200\052\153\330"
	"\334\350\155\332\370\243\317\215\273\025\150\162\043\111\327\137"
	"\115\024\252\332\200\070\351\000\341\160\222\141\233\376\071\167"
	"\347\247\121\337\113\041\154\007\067\325\171\132\036\121\271\153"
	"\145\143\106\346\234\057\346\175\240\171\337\073\167\031\263\136"
	"\300\005\076\014\047\252\023\136\177\215\270\236\336\162\011\103"
	"\326\120\051\162\200\020\360\041\211\320\134\001\351\020\140\252"
	"\026\236\266\075\111\312\233\311\127\124\147\065\306\161\171\234"
	"\301\243\017\102\263\377\143\075\317\300\076\271\320\237\144\346"
	"\075\033\043\206\345\277\117\075\023\267\163\331\050\354\166\352"
	"\217\205\054\103\205\217\201\125\117\300\016\040\137\163\007\234"
	"\216\053\043\163\352\162\261\376\051\044\330\122\020\116\074\240"
	"\324\151\344\132\370\145\257\110\046\276\151\205\061\161\042\300"
	"\234\105\063\207\270\345\206\342\011\136\064\032\255\161\273\202"
	"\332\237\334\322\005\213\033\053\112\204\260\174\365\323\074\222"
	"\030\266\127\271\002\057\026\234\331\274\262\214\211\247\046\120"
	"\105\163\235\277\121\342\343\140\153\311\000\047\044\312\271\311"
	"\227\076\251\020\123\220\227\371\223\304\266\365\042\103\204\221"
	"\175\124\174\257\003\272\075\126\100\071\300\106\271\311\150\075"
	"\011\134\162\341\347\134\341\354\371\001\144\102\241\045\133\316"
	"\322\126\036\161\164\136\272\232\126\112\007\165\306\223\225\137"
	"\352\027\333\034\302\344\153\225\372\017\154\340\113\042\012\045"
	"\120\201\103\254\077\354\337\142\167\335\103\224\223\374\373\376"
	"\244\031\123\335\360\176\176\136\063\303\255\154\271\302\316\251"
	"\307\020\327\006\346\356\142\100\022\341\145\002\240\363\164\366"
	"\220\103\244\300\256\256\355\102\031\335\154\040\022\333\360\353"
	"\355\176\172\072\036\303\076\016\137\356\176\122\126\177\171\260"
	"\002\170\161\243\206\213\023\021\210\275\156\317\264\226\271\141"
	"\343\213\314\334\007\336\235\203\010\000\117\307\252\035\170\310"
	"\013\004\010\041\331\316\072\332\376\316\221\312\260\052\036\037"
	"\200\274\256\034\377\156\036\070\036\206\040\225\265\076\101\223"
	"\044\164\127\202\221\061\264\335\214\240\021\024\135\025\342\000"
	"\101\170\001\334\106\303\026\114\242\345\265\347\062\310\312\152"
	"\016\352\344\150\077\214\314\000\137\227\367\346\224\150\323\334"
	"\135\072\011\222\055\172\325\030\074\214\344\373\004\275\316\167"
	"\003\226\354\122\363\245\154\207\213\262\070\206\341\111\032\221"
	"\331\260\226\337\134\353\366\321\204\100\332\040\176\241\333\161"
	"\141\032\244\236\033\067\023\165\041\330\161\337\005\124\135\300"
	"\057\360\316\365\245\105\346\346\246\300\231\161\266\207\010\017"
	"\075\173\155\000\175\175\075\127\344\375\036\226\023\254\315\217"
	"\211\176\036\253\222\022\042\047\077\014\104\003\066\200\236\311"
	"\161\272\124\013\070\375\305\053\003\336\303\103\055\350\233\076"
	"\065\100\327\125\360\147\235\327\307\026\173\204\061\235\315\316"
	"\241\265\320\257\324\352\327\005\204\322\063\126\207\062\366\022"
	"\144\254\126\045\246\157\035\161\310\023\041\236\222\022\253\126"
	"\062\064\034\054\177\011\130\020\054\217\232\050\144\301\132\366"
	"\320\006\234\326\221\230\326\130\254\164\272\307\346\246\051\367"
	"\317\136\220\113\030\216\065\355\171\322\121\104\223\275\137\125"
	"\023\315\051\220\103\135\221\171\324\036\104\263\264\237\242\220"
	"\177\167\130\350\345\125\340\216\242\331\350\116\032\344\053\102"
	"\277\062\334\006\060\254\057\063\314\134\220\170\175\356\177\263"
	"\051\053\334\156\320\011\070\322\057\246\303\371\052\242\321\072"
	"\044\343\112\343\202\264\035\370\304\267\247\114\320\167\020\157"
	"\314\126\175\134\024\114\041\331\236\151\356\200\330\351\342\216"
	"\144\113\344\000\254\042\305\206\122\067\274\243\131\114\271\105"
	"\007\152\020\233\155\061\346\326\011\071\113\152\317\162\030\011"
	"\210\342\346\102\061\016\034\045\316\143\325\366\376\210\132\221"
	"\167\137\205\073\045\006\140\172\213\244\142\275\152\114\155\162"
	"\344\300\316\147\002\124\000\341\235\364\361\132\260\007\015\160"
	"\137\125\255\021\060\206\362\064\145\177\176\057\132\345\261\374"
	"\002\370\155\204\101\340\243\151\177\373\106\144\072\250\161\130"
	"\051\364\055\002\124\361\103\324\346\256\366\247\131\076\177\330"
	"\000\204\047\327\200\263\161\320\137\211\360\222\255\054\244\353"
	"\364\322\163\351\007\005\033\220\266\046\130\336\007\001\374\041"
	"\115\261\353\375\313\032\001\325\256\121\361\174\123\203\027\321"
	"\230\021\324\375\142\221\024\001\235\317\350\053\034\202\274\345"
	"\326\102\137\147\275\351\353\132\352\241\157\247\047\346\137\120"
	"\210\130\251\243\240\364\053\354\304\062\063\173\343\045\303\032"
	"\177\202\004\346\047\113\072\302\055\322\106\004\064\374\071\024"
	"\032\035\172\240\354\235\212\010\312\201\140\207\212\266\275\044"
	"\134\042\333\133\255\374\361\337\134\164\351\224\215\040\365\177"
	"\236\313\323\322\004\150\230\112\116\173\065\033\255\226\057\242"
	"\127\252\326\150\126\315\140\222\301\317\232\044\162\341\324\022"
	"\364\061\321\234\236\170\345\213\046\125\321\117\304\216\147\104"
	"\040\033\164\357\234\002\172\236\110\066\165\322\302\020\231\275"
	"\151\321\137\324\146\213\137\225\357\044\170\065\244\332\136\141"
	"\203\265\073\254\011\300\135\343\351\314\162\107\334\116\064\230"
	"\124\033\017\207\076\203\224\350\030\304\057\301\047\357\074\033"
	"\136\273\162\321\152\032\034\045\223\207\232\271\150\104\315\253"
	"\376\200\063\365\242\257\077\203\040\053\340\332\067\166\032\143"
	"\141\052\251\016\207\146\376\130\114\263\011\110\323\026\122\041"
	"\345\341\011\045\247\206\206\231\133\172\142\166\030\052\261\012"
	"\002\057\362\277\071\336\252\240\332\061\307\147\036\066\370\207"
	"\204\053\153\351\057\225\121\211\214\022\344\346\022\323\151\200"
	"\013\155\374\322\023\140\143\022\207\274\013\003\074\050\173\163"
	"\213\203\276\005\364\221\067\331\225\207\321\037\310\275\152\332"
	"\154\153\077\025\376\256\221\064\025\305\350\233\071\251\167\244"
	"\202\261\107\066\263\213\100\143\063\267\166\045\067\203\242\064"
	"\272\161\052\060\374\227\202\005\066\050\321\030\304\266\240\013"
	"\336\023\305\076\275\260\256\271\311\036\164\362\127\161\165\166"
	"\040\045\272\235\102\060\236\316\153\026\322\113\034\246\025\277"
	"\323\307\077\323\314\365\013\013\001\012\255\251\341\175\172\334"
	"\347\267\024\016\114\373\363\305\375\034\257\342\344\241\373\001"
	"\231\332\370\301\216\324\176\235\267\021\214\240\003\060\341\077"
	"\217\002\233\225\063\303\244\117\225\315\233\357\355\317\147\072"
	"\110\115\041\276\240\225\245\220\130\326\210\247\327\052\037\344"
	"\230\177\073\127\106\031\060\065\127\217\036\021\064\022\060\064"
	"\262\032\326\075\232\316\301\207\202\303\050\106\313\104\140\006"
	"\027\061\146\112\151\043\357\236\260\045\066\036\247\347\066\115"
	"\302\313\056\322\025\025\212\013\026\051\264\020\275\170\201\334"
	"\002\266\265\222\176\132\344\110\342\024\146\323\271\100\120\054"
	"\032\350\321\143\163\324\127\152\311\121\250\164\302\276\146\044"
	"\067\373\104\133\170\014\140\172\341\104\201\167\370\022\233\315"
	"\043\236\355\160\225\067\236\014\054\154\144\154\140\100\053\110"
	"\145\271\116\371\127\020\303\122\034\072\324\311\011\326\330\215"
	"\000\317\337\104\271\121\147\320\135\062\137\100\062\377\140\330"
	"\071\266\104\276\217\101\342\114\070\340\357\122\175\157\322\203"
	"\013\130\262\212\044\156\035\227\367\050\134\021\071\013\277\272"
	"\263\142\375\335\235\236\372\376\153\236\143\276\110\124\262\041"
	"\372\224\144\271\325\210\250\277\335\324\163\000\361\152\371\250"
	"\256\025\175\352\316\365\172\163\322\042\040\236\377\132\112\366"
	"\132\267\006\300\011\330\033\057\141\232\103\030\235\053\273\006"
	"\105\362\153\157\221\343\056\164\314\322\277\143\166\326\363\260"
	"\320\111\251\127\126\232\172\077\356\226\024\136\167\227\034\066"
	"\333\213\034\365\244\174\227\055\157\161\002\314\157\371\054\320"
	"\212\327\216\002\025\033\122\046\232\034\123\231\265\051\045\215"
	"\022\374\267\172\017\114\245\321\314\047\153\224\252\070\320\150"
	"\170\334\340\221\162\256\057\135\156\116\037\217\147\031\102\031"
	"\121\074\377\334\355\042\332\001\303\234\305\077\113\012\001\307"
	"\155\036\335\325\177\354\053\176\324\330\355\353\261\216\322\230"
	"\033\311\266\251\143\317\254\312\334\072\234\321\011\222\345\045"
	"\240\361\216\373\354\301\037\067\243\047\003\350\164\040\320\310"
	"\026\252\346\043\157\172\243\044\164\350\236\043\357\123\145\072"
	"\147\262\220\167\340\043\342\101\054\025\367\316\020\132\326\207"
	"\025\310\356\271\243\124\027\340\314\234\101\266\002\044\164\133"
	"\007\127\337\007\214\344\020\114\362\363\262\141\142\013\100\171"
	"\162\253\333\263\101\057\312\122\241\144\254\310\377\116\126\140"
	"\060\013\232\130\126\317\263\176\317\064\060\177\275\051\364\100"
	"\160\131\363\026\064\040\316\327\120\245\172\326\035\044\113\207"
	"\165\326\207\047\105\366\037\306\357\322\153\037\112\231\212\250"
	"\220\042\054\003\207\244\070\024\202\133\271\177\047\370\376\135"
	"\314\272\136\316\202\174\224\327\161\325\336\315\061\011\002\320"
	"\215\021\066\157\217\041\126\031\347\164\127\317\157\234\056\364"
	"\376\345\265\136\330\220\067\374\356\246\110\124\263\306\156\022"
	"\373\103\135\362\266\261\126\370\046\230\130\115\011\332\203\302"
	"\253\141\126\042\323\004\166\306\040\140\333\307\242\035\056\224"
	"\035\331\037\212\177\112\374\145\044\172\174\256\153\025\364\374"
	"\170\052\247\072\013\234\101\170\244\052\031\365\116\052\166\201"
	"\260\207\135\125\257\161\312\232\236\104\047\201\235\113\276\317"
	"\323\036\027\355\243\362\031\024\343\162\003\255\160\246\075\236"
	"\314\001\225\353\174\270\166\304\140\061\071\234\147\220\077\246"
	"\132\311\372\066\165\235\004\144\231\141\301\305\175\154\367\275"
	"\330\317\165\254\325\176\121\205\260\327\105\037\127\232\321\241"
	"\055\322\204\264\170\314\363\032\271\254\364\301\357\144\337\176"
	"\034\017\145\135\030\304\337\174\111\222\364\136\004\210\152\063"
	"\306\004\055\250\276\267\011\227\254\161\310\332\106\041\320\242"
	"\356\213\361\325\330\331\305\377\356\105\353\125\001\124\163\033"
	"\345\255\365\247\202\250\123\131\246\033\235\001\014\243\136\210"
	"\104\026\354\321\241\257\066\312\040\307\131\002\226\030\231\277"
	"\000\102\141\036\272\011\267\152\005\351\036\367\367\124\171\255"
	"\167\325\010\164\125\170\202\203\251\053\070\313\070\200\243\346"
	"\176\367\156\240\051\242\274\306\027\007\047\137\225\027\211\064"
	"\065\076\273\256\151\124\021\115\235\251\311\251\176\046\326\160"
	"\114\237\123\136\163\250\065\063\274\344\221\316\207\055\016\007"
	"\244\173\336\025\341\051\101\370\366\110\355\270\226\137\344\032"
	"\072\325\314\365\163\005\106\027\275\166\243\226\272\010\034\057"
	"\251\364\016\024\131\051\120\330\111\364\130\175\212\030\115\233"
	"\126\052\326\116\117\104\376\157\165\310\161\054\246\277\007\310"
	"\075\302\254\024\154\002\162\207\275\055\273\362\260\225\132\311"
	"\260\267\076\075\013\151\016\102\316\014\133\222\353\210\305\227"
	"\235\331\155\225\234\057\052\346\302\310\344\073\220\054\273\166"
	"\176\214\211\267\043\276\172\054\007\051\077\022\315\012\217\247"
	"\367\023\103\244\304\000\166\262\163\127\101\035\043\341\050\024"
	"\354\201\300\023\065\221\121\071\270\003\206\145\172\165\222\157"
	"\300\003\342\266\066\142\270\005\167\110\343\073\377\010\144\100"
	"\053\144\162\053\236\150\117\067\022\332\214\146\333\373\242\265"
	"\243\216\261\172\312\141\337\224\026\244\343\064\324\230\137\372"
	"\177\060\074\025\004\203\325\341\233\142\222\262\240\207\347\201"
	"\034\221\361\256\173\362\336\036\017\035\033\063\375\052\104\312"
	"\036\312\206\125\247\065\066\245\120\246\057\163\217\225\342\061"
	"\056\214\022\042\316\040\060\275\072\026\267\306\005\022\223\327"
	"\150\363\077\054\272\364\220\350\114\327\354\277\324\125\324\111"
	"\136\340\367\020\302\253\214\154\111\174\324\072\315\357\247\204"
	"\243\105\057\304\170\131\260\232\062\064\305\016\330\014\353\067"
	"\217\257\160\042\134\043\126\001\302\140\204\264\346\171\132\327"
	"\356\354\043\363\300\330\052\050\305\367\270\063\322\354\113\310"
	"\377\056\054\357\356\242\115\127\147\076\353\340\316\107\147\327"
	"\027\314\122\360\117\242\072\171\072\013\116\024\323\375\077\226"
	"\063\027\053\157\174\375\172\223\224\023\025\010\223\307\266\337"
	"\040\352\363\201\120\034\034\340\052\003\274\116\357\222\157\370"
	"\070\104\110\167\203\333\261\301\000\041\251\240\110\067\233\155"
	"\262\165\224\214\163\315\031\017\202\346\256\016\125\214\163\333"
	"\156\125\304\223\220\303\160\061\103\332\024\303\260\006\051\304"
	"\345\233\047\170\334\260\365\152\135\022\133\225\351\046\061\346"
	"\317\223\075\274\116\366\224\315\331\367\031\015\266\057\373\104"
	"\020\277\320\251\124\172\335\010\151\360\206\367\345\375\314\127"
	"\054\147\354\122\004\014\253\266\316\026\165\172\247\266\150\020"
	"\122\136\041\075\150\076\104\160\262\262\351\261\151\167\302\265"
	"\336\212\316\206\161\073\312\205\323\175\255\363\347\271\172\213"
	"\054\170\317\323\302\022\067\041\377\043\116\303\247\212\133\320"
	"\013\022\203\245\153\300\236\170\074\106\037\345\110\013\203\231"
	"\014\340\236\160\021\021\003\055\304\011\023\023\365\240\171\223"
	"\266\050\062\300\371\346\013\133\220\155\323\075\354\371\100\230"
	"\036\067\040\272\117\250\012\014\000\215\050\106\175\367\161\211"
	"\237\236\100\000\162\252\211\013\251\317\312\022\067\142\347\244"
	"\376\004\267\362\133\336\155\124\330\341\146\177\000\267\202\127"
	"\324\235\313\014\071\133\010\274\341\176\003\301\257\362\340\076"
	"\265\033\012\005\310\376\321\011\243\333\276\121\204\200\360\102"
	"\102\057\172\374\274\306\314\302\102\302\270\014\366\112\324\102"
	"\077\056\244\307\005\331\276\306\310\167\026\036\351\226\221\036"
	"\377\143\374\205\046\121\361\132\330\136\000\322\224\000\373\152"
	"\060\205\010\262\114\215\344\270\355\335\365\152\132\305\217\167"
	"\266\113\206\271\152\126\221\343\376\271\075\356\241\316\250\355"
	"\251\112\264\271\054\171\004\233\371\354\135\354\273\070\016\230"
	"\143\062\361\312\203\106\354\254\147\322\104\130\066\344\254\305"
	"\263\351\355\055\140\362\160\032\320\125\240\262\137\376\347\171"
	"\253\130\064\056\062\323\012\005\331\226\040\004\340\245\265\135"
	"\233\210\231\055\240\011\107\161\137\347\043\276\346\013\067\222"
	"\143\154\300\225\077"
#define      chk2_z	19
#define      chk2	((&data[4144]))
	"\141\273\035\116\204\210\325\321\254\210\334\273\314\052\001\343"
	"\102\164\226\374\260\127"
#define      xecc_z	15
#define      xecc	((&data[4164]))
	"\237\120\127\177\072\172\125\022\307\020\325\362\072\154\036\251"
	"\374\132\070"
#define      lsto_z	1
#define      lsto	((&data[4182]))
	"\233"
#define      tst1_z	22
#define      tst1	((&data[4185]))
	"\131\220\204\247\031\154\341\213\370\337\222\020\145\327\056\052"
	"\110\035\103\121\104\252\014\323\140\077\233"
#define      msg2_z	19
#define      msg2	((&data[4214]))
	"\004\222\224\104\240\265\115\011\132\004\173\076\344\110\262\275"
	"\331\226\245\262\004\232\047\135\057\135\276"
#define      rlax_z	1
#define      rlax	((&data[4237]))
	"\313"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	0	/* Define as 1 to enable ptrace the executable */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

int chkenv(int argc)
{
	char buff[512];
	unsigned mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask  = (unsigned)chkenv;
	mask ^= (unsigned)getpid() * ~mask;
	sprintf(buff, "x%x", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%u %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%u %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;

	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && date[0]<time(NULL))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	ret = chkenv(argc);
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		if (text_z < hide_z) {
			/* Prepend spaces til a hide_z script size. */
			scrpt = malloc(hide_z);
			if (!scrpt)
				return 0;
			memset(scrpt, (int) ' ', hide_z);
			memcpy(&scrpt[hide_z - text_z], text, text_z);
		} else {
			scrpt = text;	/* Script text */
		}
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, argv[0]);
		} else {
			scrpt = argv[0];
		}
	}
	j = 0;
	varg[j++] = argv[0];		/* My own name at execution */
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
